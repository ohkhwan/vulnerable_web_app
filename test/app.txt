from flask import Flask, request, jsonify, render_template, redirect, url_for, session, g
import sqlite3
import os

app = Flask(__name__)

# --- Configuration ---
# IMPORTANT: Replace with a real secret key in production!
# This is used to encrypt session cookies.
app.secret_key = os.urandom(24)
DB_NAME = 'users.db'

# Ensure the database file exists by running the creation script
# (This is a simple way; in production, you'd ensure migration is handled)
if not os.path.exists(DB_NAME):
     print(f"Database file '{DB_NAME}' not found. Please run create_db.py first.")
     # In a real application, you might exit or handle this more robustly


# --- Database Connection Helper ---
def get_db():
    """Opens a new database connection if there is none yet for the current application context."""
    if 'db' not in g:
        g.db = sqlite3.connect(DB_NAME)
        g.db.row_factory = sqlite3.Row # Allows accessing columns by name
    return g.db

@app.teardown_appcontext
def close_db(e=None):
    """Closes the database connection at the end of the request."""
    db = g.pop('db', None)
    if db is not None:
        db.close()

# --- Before Request: Load logged in user ---
@app.before_request
def load_logged_in_user():
    """Load the user from the session before each request."""
    user_id = session.get('user_id')
    if user_id is None:
        g.user = None # Store user object (or None) in Flask's global context 'g'
    else:
        db = get_db()
        g.user = db.execute(
            'SELECT * FROM users WHERE id = ?', (user_id,)
        ).fetchone()

# --- Routes for Serving HTML Pages ---

@app.route('/')
@app.route('/index.html')
def index():
    """Serves the index.html homepage."""
    return render_template('index.html') # Assumes index.html exists

@app.route('/login.html')
def login_page():
    """Serves the login.html page."""
    # Check if user is already logged in, maybe redirect
    if g.user:
         return redirect(url_for('myinfo_page'))
    return render_template('login.html') # Assumes login.html exists

@app.route('/myinfo.html')
def myinfo_page():
    """Serves the myinfo.html page (requires login)."""
    # Require login
    if g.user is None:
        return redirect(url_for('login_page')) # Redirect to login if not logged in
    # Pass user data to the template if myinfo.html needs it for display
    # You would typically fetch user data here based on g.user['id'] if needed in the template
    return render_template('myinfo.html') # Assumes myinfo.html exists


# Assuming xml_parser.html and redirect.html also exist as static pages
@app.route('/xml_parser.html')
def xml_parser_page():
    return render_template('xml_parser.html')

@app.route('/redirect.html')
def redirect_page():
    return render_template('redirect.html')

# --- API Endpoints ---
@app.route('/register', methods=['POST'])
def register_user():
    """Handles user registration requests."""
    data = request.json # Get data sent as JSON

    if not data:
        return jsonify({'success': False, 'message': 'No data provided'}), 400

    user_id = data.get('user_id')
    password = data.get('password') # WARNING: Plain password received
    name = data.get('name')
    ssn = data.get('ssn') # WARNING: Sensitive data received

    # Basic validation
    if not all([user_id, password, name, ssn]):
        return jsonify({'success': False, 'message': '모든 필드를 입력해주세요.'}), 400

    db = get_db()
    cursor = db.cursor()

    try:
        # Check if user_id already exists
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if cursor.fetchone() is not None:
            return jsonify({'success': False, 'message': '이미 사용 중인 아이디입니다.'}), 409 # Conflict

        # Check if SSN already exists (as it's marked UNIQUE in DB schema)
        cursor.execute("SELECT id FROM users WHERE ssn = ?", (ssn,))
        if cursor.fetchone() is not None:
             # Note: This might reveal if an SSN exists. In a real app, be careful with error messages.
             return jsonify({'success': False, 'message': '이미 등록된 주민등록번호입니다.'}), 409 # Conflict

        # Insert new user (WARNING: Storing plain password and SSN!)
        # In production: Hash password, encrypt SSN, use prepared statements securely.
        cursor.execute("INSERT INTO users (id, password, name, ssn) VALUES (?, ?, ?, ?)",
                       (user_id, password, name, ssn))

        db.commit()

        # XSS Vulnerability Simulation (as in original HTML)
        # WARNING: This is intentionally insecure to match the original file's simulation.
        # Do NOT do this in a real application. Sanitize/escape output.
        welcome_message = f"회원가입이 완료되었습니다. 환영합니다, {name}님!"

        return jsonify({'success': True, 'message': welcome_message}), 201 # Created

    except sqlite3.Error as e:
        print(f"Database error: {e}")
        db.rollback() # Roll back changes if insert failed
        return jsonify({'success': False, 'message': '데이터베이스 오류가 발생했습니다.'}), 500

@app.route('/login', methods=['POST'])
def login():
    """Handles user login requests and creates a session."""
    data = request.json

    if not data:
        return jsonify({'success': False, 'message': 'No data provided'}), 400

    user_id = data.get('user_id')
    password = data.get('password') # WARNING: Plain password received

    if not user_id or not password:
         return jsonify({'success': False, 'message': '아이디와 비밀번호를 입력해주세요.'}), 400

    db = get_db()
    user = db.execute(
        'SELECT * FROM users WHERE id = ?', (user_id,)
    ).fetchone()

    # WARNING: Comparing plain password! Use password hashing (bcrypt) in real apps.
    if user is None or user['password'] != password:
        return jsonify({'success': False, 'message': '잘못된 아이디 또는 비밀번호입니다.'}), 401 # Unauthorized
    else:
        # Login successful, create session
        session.clear()
        session['user_id'] = user['id']
        return jsonify({'success': True, 'message': f"로그인 성공! 환영합니다, {user['name']}님!"}), 200

@app.route('/logout')
def logout():
    """Logs out the current user by clearing the session."""
    session.clear()
    return redirect(url_for('index')) # Redirect to homepage after logout

@app.route('/user_info', methods=['GET'])
def user_info():
    """Provides the logged-in user's information."""
    # Require login (uses g.user populated by before_request)
    if g.user is None:
        print("Access to /user_info denied: User not logged in.") # Added logging
        return jsonify({'success': False, 'message': '로그인이 필요합니다.'}), 401

    # Return user info (excluding sensitive password, but including SSN as per original structure)
    # WARNING: Returning SSN is highly sensitive! Do not do this in real apps without justification and security measures.
    user_data = {
        'id': g.user['id'],
        'name': g.user['name'],
        'ssn': g.user['ssn']
        # Password is NOT included
    }
    print(f"Serving user info for user ID '{g.user['id']}'.") # Added logging
    return jsonify({'success': True, 'user': user_data}), 200

@app.route('/user_info_other/<user_id>', methods=['GET'])
def user_info_other(user_id):
    """
    Provides information for a specified user ID.
    Simulates Insecure Direct Object Reference (IDOR)/Access Control vulnerability.
    Any logged-in user can view any other user's basic info + SSN.
    """
    # WARNING: This endpoint has an intentional Access Control vulnerability
    # as suggested by the myinfo.txt structure. In a real app, you would
    # check if the requesting user has permission (e.g., is an admin).

    # Although the vulnerability is Access Control, let's still require *any* login
    # to somewhat align with needing a session to access the myinfo page itself.
    # If you want the vulnerability to be accessible *without* login, remove this check.
    if g.user is None:
         print(f"Access to /user_info_other/{user_id} denied: User not logged in.")
         return jsonify({'success': False, 'message': '로그인이 필요합니다.'}), 401

    db = get_db()
    user = db.execute(
        'SELECT id, name, ssn FROM users WHERE id = ?', (user_id,) # Select only needed fields
    ).fetchone()

    if user is None:
        print(f"Access to /user_info_other/{user_id}: User not found.")
        return jsonify({'success': False, 'message': '해당 사용자를 찾을 수 없습니다.'}), 404 # Not Found

    # WARNING: Returning SSN is highly sensitive!
    user_data = {
        'id': user['id'],
        'name': user['name'], # WARNING: XSS Source if used unsafely on client
        'ssn': user['ssn']
    }
    print(f"Serving info for user ID '{user_id}' requested by user '{g.user['id']}'. (IDOR simulation)")
    return jsonify({'success': True, 'user': user_data}), 200

# --- NEW ROUTE: View Other User Info ---

@app.route('/update_password', methods=['POST'])
def update_password():
    """Handles password update requests."""
    # Require login
    if g.user is None:
        print("Access to /update_password denied: User not logged in.")
        return jsonify({'success': False, 'message': '로그인이 필요합니다.'}), 401

    data = request.json
    # Need current password validation against the one in the DB
    # The client-side JS sends current_password and new_password
    if not data or 'current_password' not in data or 'new_password' not in data:
        return jsonify({'success': False, 'message': '현재 비밀번호와 새 비밀번호를 모두 입력해주세요.'}), 400

    current_password_input = data['current_password'] # WARNING: Plain password received
    new_password = data['new_password'] # WARNING: Plain password received

    db = get_db()
    # Fetch the user again to verify current password
    user = db.execute(
        'SELECT * FROM users WHERE id = ?', (g.user['id'],)
    ).fetchone()

    # Check if the provided current password matches the one in the DB
    # WARNING: Comparing plain passwords! Use password hashing (bcrypt) in real apps.
    if user is None or user['password'] != current_password_input:
         print(f"Password update failed for user '{g.user['id']}': Incorrect current password.")
         return jsonify({'success': False, 'message': '현재 비밀번호가 올바르지 않습니다.'}), 401 # Unauthorized

    try:
        # Update password for the logged-in user
        # WARNING: Storing plain password! Use password hashing (bcrypt) in real apps.
        cursor = db.cursor()
        cursor.execute("UPDATE users SET password = ? WHERE id = ?",
                       (new_password, g.user['id']))
        db.commit()
        print(f"Password updated successfully for user '{g.user['id']}'.")
        return jsonify({'success': True, 'message': '비밀번호가 성공적으로 업데이트되었습니다.'}), 200

    except sqlite3.Error as e:
        print(f"Database error during password update for user '{g.user['id']}': {e}")
        db.rollback()
        return jsonify({'success': False, 'message': '비밀번호 업데이트 중 오류가 발생했습니다.'}), 500

@app.route('/reset_password', methods=['POST'])
def reset_password():
    """Handles password reset requests using ID and SSN."""
    # ... (existing validation and DB logic remains the same) ...
    # ... (Includes the simulated SQL Injection and plain password reset to user_id) ...
    # ... (Ensure this logic correctly updates the DB using execute with parameters) ...
    # Note: The simulated SQL injection happens in the check `if "' OR '1'='1" in ssn:`
    # The subsequent UPDATE query *should* use parameterized execution `cursor.execute("UPDATE users SET password = ? WHERE id = ?", (new_password, user_id))`
    # which prevents *actual* injection in the UPDATE, but the logic flow is still vulnerable
    # because the SSN check is bypassed.
    # ... (Add logging for reset attempts) ...
    data = request.json
    # ... validation ...
    db = get_db()
    cursor = db.cursor()
    # ... user check by id ...
    # ... simulated SSN check / injection ...
    # ... password reset logic ...
    try:
         cursor.execute("UPDATE users SET password = ? WHERE id = ?",
                       (new_password, user_id))
         db.commit()
         print(f"Password reset successfully for user '{user_id}'.")
         # ... return response ...
    except sqlite3.Error as e:
        print(f"Database error during password reset for user '{user_id}': {e}")
        db.rollback()
        return jsonify({'success': False, 'message': '비밀번호 초기화 중 오류가 발생했습니다.'}), 500

# ... (if __name__ == '__main__': app.run(debug=True) remains the same) ...
# --- NEW ROUTE: View Other User Info ---
@app.route('/user_info_other/<user_id>', methods=['GET'])
def user_info_other(user_id):
    """
    Provides information for a specified user ID.
    Simulates Insecure Direct Object Reference (IDOR)/Access Control vulnerability.
    Any logged-in user can view any other user's basic info + SSN.
    """
    # WARNING: This endpoint has an intentional Access Control vulnerability
    # as suggested by the myinfo.txt structure. In a real app, you would
    # check if the requesting user has permission (e.g., is an admin).

    # Although the vulnerability is Access Control, let's still require *any* login
    # to somewhat align with needing a session to access the myinfo page itself.
    # If you want the vulnerability to be accessible *without* login, remove this check.
    if g.user is None:
         print(f"Access to /user_info_other/{user_id} denied: User not logged in.")
         return jsonify({'success': False, 'message': '로그인이 필요합니다.'}), 401

    db = get_db()
    user = db.execute(
        'SELECT id, name, ssn FROM users WHERE id = ?', (user_id,) # Select only needed fields
    ).fetchone()

    if user is None:
        print(f"Access to /user_info_other/{user_id}: User not found.")
        return jsonify({'success': False, 'message': '해당 사용자를 찾을 수 없습니다.'}), 404 # Not Found

    # WARNING: Returning SSN is highly sensitive!
    user_data = {
        'id': user['id'],
        'name': user['name'], # WARNING: XSS Source if used unsafely on client
        'ssn': user['ssn']
    }
    print(f"Serving info for user ID '{user_id}' requested by user '{g.user['id']}'. (IDOR simulation)")
    return jsonify({'success': True, 'user': user_data}), 200


# --- Helper to require login for certain routes ---
# Not used as a decorator here, but checked explicitly in route functions
# Example:
# def login_required(view):
#     @functools.wraps(view)
#     def wrapped_view(**kwargs):
#         if g.user is None:
#             return redirect(url_for('login_page'))
#         return view(**kwargs)
#     return wrapped_view


if __name__ == '__main__':
    # Running with debug=True allows code changes to auto-reload
    # In production, use a production WSGI server (like Gunicorn or uWSGI)
    app.run(debug=True)